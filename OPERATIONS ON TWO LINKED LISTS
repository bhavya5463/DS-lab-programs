#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
struct list
{
        int data;
        struct list *next;
};
typedef struct list node;
node *create(node *first)
{
        node *new,*prev;
        int x;
        printf("enter data(enter -1 to stop)");
        scanf("%d",&x);
        while(x!=-1)
        {
                new=(node*)malloc(sizeof(node));
                new->data=x;
                new->next=NULL;
                if(first==NULL)
                {
                        first=new;
                        prev=new;
                }
                else
                {
                        prev->next=new;
                        prev=new;
                }
                printf("enter data(enter -1 to stop)");
                scanf("%d",&x);
        }
        return first;
}
void display(node *first)
{
        node *temp=first;
        if(first==NULL)
        {
                printf("\nno list to display");
        }
        else
        {
                while(temp!=NULL)
                {
                        printf("|%d|->",temp->data);
                        temp=temp->next;
                }
                printf("NULL");
        }
}
node *sort(node *first)
{
        node *temp1,*temp2;
        int x;
        for(temp1=first;temp1!=NULL;temp1=temp1->next)
        {
                for(temp2=temp1->next;temp2!=NULL;temp2=temp2->next)
                {
                        if(temp1->data > temp2->data)
                        {
                                x=temp1->data;
                                temp1->data=temp2->data;
                                temp2->data=x;
                        }
                }
        }
        return first;
}
node *addnode(node *l3,node *new)
{
        node *temp;
        if(l3==NULL)
        {
                l3=new;
        }
        else
        {
                temp=l3;
                while(temp->next!=NULL)
                {
                        temp=temp->next;
                }
                temp->next=new;
        }
        return l3;
}
node *listunion(node *l1,node *l2)
{
        node *l3=NULL,*new;
        while(l1!=NULL &&l2!=NULL)
        {
                if(l1->data < l2->data)
                {
                        new=(node *)malloc(sizeof(node));
                        new->data=l1->data;
                        new->next=NULL;
                        l3=addnode(l3,new);
                        l1=l1->next;
                }
                else if(l1->data > l2->data)
                {
                        new=(node *)malloc(sizeof(node));
                        new->data=l2->data;
                        new->next=NULL;
                        l3=addnode(l3,new);
                        l2=l2->next;
                }
                else
                {
                        new=(node *)malloc(sizeof(node));
                        new->data=l1->data;
                        new->next=NULL;
                        l3=addnode(l3,new);
                        l1=l1->next;
                        l2=l2->next;
                }
        }
        if(l1==NULL)
        {
                while(l2!=NULL)
                {
                        new=(node *)malloc(sizeof(node));
                        new->data=l2->data;
                        new->next=NULL;
                        l3=addnode(l3,new);
                        l2=l2->next;
                }
        }
        if(l2==NULL)
        {
                while(l1!=NULL)
                {
                        new=(node *)malloc(sizeof(node));
                        new->data=l1->data;
                        new->next=NULL;
                        l3=addnode(l3,new);
                        l1=l1->next;
                }
        }
        return l3;
}
node *insert(node *l1,node *l2)
{
        node *l4=NULL,*new;
        while(l1!=NULL && l2!=NULL)
        {
                if(l1->data < l2->data)
                {
                        l1=l1->next;
                }
                else if(l2->data < l1->data)
                {
                        l2=l2->next;
                }
                else
                {
                        new=(node*)malloc(sizeof(node));
                        new->data=l1->data;
                        new->next=NULL;
                        l4=addnode(l4,new);
                        l1=l1->next;
                        l2=l2->next;
                }
        }
        return l4;
}
node *merge(node *l1,node *l2)
{
            node *l5=NULL,*new;
            while(l1!=NULL && l2!=NULL)
            {
                    if(l1->data < l2->data)
                    {
                            new=(node*)malloc(sizeof(node));
                            new->data=l1->data;
                            new->next=NULL;
                            l5=addnode(l5,new);
                            l1=l1->next;
                    }
                    else if(l1->data > l2->data)
                    {
                            new=(node *)malloc(sizeof(node));
                            new->data=l2->data;
                            new->next=NULL;
                            l5=addnode(l5,new);
                            l2=l2->next;
                    }
                    else
                    {
                            new=(node*)malloc(sizeof(node));
                            new->data=l1->data;
                            new->next=NULL;
                            l5=addnode(l5,new);
                            new=(node*)malloc(sizeof(node));
                            new->data=l2->data;
                            new->next=NULL;
                            l5=addnode(l5,new);
                            l1=l1->next;
                            l2=l2->next;
                    }
            }
            if(l1==NULL)
            {
                    while(l2!=NULL)
                    {
                            new=(node*)malloc(sizeof(node));
                            new->data=l2->data;
                            new->next=NULL;
                            l5=addnode(l5,new);
                            l2=l2->next;
                    }
            }
            if(l2==NULL)
            {
                    while(l1!=NULL)
                    {
                            new=(node*)malloc(sizeof(node));
                            new->data=l1->data;
                            new->next=NULL;
                            l5=addnode(l5,new);
                            l1=l1->next;
                    }
            }
            return l5;
}
node *concatenate(node *l1,node *l2)
{
        node *l6=NULL,*temp;
        if(l1==NULL)
        {
                return l2;
        }
        else if(l2==NULL)
        {
                return l1;
        }
        else
        {
                temp=l1;
                while(temp->next!=NULL)
                {
                        temp=temp->next;
                }
                temp->next=l2;
        }
        return l1;
}
void main()
{
        node *l1=NULL,*l2=NULL,*l3,*l4,*l5,*l6;
        int ch;
        printf("\n create first LL");
        l1=create(l1);
        display(l1);
        printf("the list after sorting is");
        l1=sort(l1);
        display(l1);
        printf("\n create second LL");
        l2=create(l2);
        display(l2);
        printf("the list after sorting is");
        l2=sort(l2);
        display(l2);
"operatiwhile(1)c" 297L, 4940C
        {
                printf("\n 1.union \n 2.intsersection \n 3.merge \n 4.concatenate \n 5.exit");
                printf("\n enter choice");
                scanf("%d",&ch);
                switch(ch)
                {
                        case 1:printf("\nthe union of two lists is:");
                               l3=listunion(l1,l2);
                               display(l3);
                               break;
                        case 2:printf("\nthe intersection of two lists is: ");
                               l4=insert(l1,l2);
                               display(l4);
                               break;
                        case 3:printf("\n the merge of two lists is:");
                               l5=merge(l1,l2);
                               display(l5);
                               break;
                        case 4:printf("\n the concatenated list of two lista is: ");
                               l6=concatenate(l1,l2);
                               display(l6);
                               break;
                        case 5:exit(1);
                               break;
                }
        }
}
