#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
struct DLL
{
        int data;
        struct DLL *right,*left;
};
typedef struct DLL node;
node *create(node *first)
{
        node *new,*prev;
        int x;
        printf("enter data(enter -1 to stop)");
        scanf("%d",&x);
        while(x!=-1)
        {
                new=(node*)malloc(sizeof(node));
                new->data=x;
                new->left=new->right=NULL;
                if(first==NULL)
                {
                        first=new;
                        prev=new;
                }
                else
                {
                        prev->right=new;
                        new->left=prev;
                        prev=new;
                }
                printf("enter data(enter -1 to stop)");
                scanf("%d",&x);
        }
        return first;
}
void display(node* first)
{
        node *temp=first;
        if(first==NULL)
        {
                printf("no list to display");
        }
        else
        {
                printf("NULL");
                while(temp!=NULL)
                {
                        printf("<-|%d|->",temp->data);
                        temp=temp->right;
                }
                printf("NULL");
        }
}
int count(node *first)
{
        int c=0;
        node *temp=first;
        while(temp!=NULL)
        {
                c++;
                temp=temp->right;
        }
        return c;
}
void search(node *first,int x)
{
        node *temp=first;
        int flag=0;
        while(temp!=NULL)
        {
                if(temp->data==x)
                {
                        flag=1;
                        break;
                }
                else
                {
                        temp=temp->right;
                }
        }
        if(flag==1)
        {
                printf("\nelement %d is found",x);
        }
        else
        {
                printf("\nelemnt %d is not foung",x);
        }
}
node *insert_at_begin(node *first,int x)
{
        node *new;
        new=(node*)malloc(sizeof(node));
        new->data=x;
        new->left=new->right=NULL;
        if(first==NULL)
        {
                first=new;
        }
        else
        {
                new->right=first;
                first->left=new;
                first=new;
        }
        return first;
}
node *insert_at_end(node *first,int x)
{
        node *temp=first,*new;
        new=(node*)malloc(sizeof(node));
        new->data=x;
        new->right=new->left=NULL;
        if(first==NULL)
        {
                first=new;
        }
        else
        {
                while(temp->right!=NULL)
                {
                        temp=temp->right;
                }
                temp->right=new;
                new->left=temp;
        }
        return first;
}
node *insert_at_pos(node *first,int x,int pos)
{
        node *temp,*new;
        int n=count(first),i;
        new=(node*)malloc(sizeof(node));
        new->data=x;
        new->left=new->right=NULL;
        if(pos>1 && pos<n)
        {
                temp=first;
                for(i=1;i<pos-1;i++)
                {
                        temp=temp->right;
                }
                new->right=temp->right;
                temp->right=new;
                new->left=temp;
                new->right->left=new;
        }
        return first;
}
node *delete(node *first,int x)
{
        node *temp;
        int flag=0;
        if(first==NULL)
        {
                printf("no llist to delete");
        }
        else if(first->data==x)
        {
                temp=first;
                first=first->right;
                if(first!=NULL)
                {
                        first->left=NULL;
                        free(temp);
                }
        }
        else
        {
                temp=first;
                while(temp!=NULL)
                {
                        if(temp->data==x)
                        {
                                flag=1;
                                break;
                        }
                        else
                        {
                                temp=temp->right;
                        }
                }
                if(flag==1)
                {
                        if(temp->right==NULL)
                        {
                                temp->left->right=NULL;
                                free(temp);
                        }
                        else
                        {
                                temp->right->left=temp->left;
                                temp->left->right=temp->right;
                                free(temp);
                        }
                }
                else
                {
                        printf("the element %d is not found",x);
                }
        }
        return first;
}

int main()
{
        int n,pos,x;
        node *head=NULL;
        head=create(head);
        display(head);
        n=count(head);
        printf("\nthe no. of nodes in DLL is %d",n);
        printf("\nenter elemnt to search");
        scanf("%d",&x);
        search(head,x);
        printf("\nenter elemnt to insert at begin");
        scanf("%d",&x);
        head=insert_at_begin(head,x);
        display(head);
        printf("\nenter elemnt to insert at end");
        scanf("%d",&x);
        head=insert_at_end(head,x);
        display(head);
        printf("\nenter element to insert at pos");
        scanf("%d",&x);
        printf("\nenter pos");
        scanf("%d",&pos);
        head=insert_at_pos(head,x,pos);
        display(head);
        printf("\nenter elemnt to delete");
        scanf("%d",&x);
        head=delete(head,x);
        display(head);
}
